/*****************************************************************************
*
* Copyright (c) 2000 - 2012, Lawrence Livermore National Security, LLC
* Produced at the Lawrence Livermore National Laboratory
* LLNL-CODE-442911
* All rights reserved.
*
* This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or other materials provided with the distribution.
*  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
*    be used to endorse or promote products derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
* LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
* DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/


// ************************************************************************* //
//                            avtVlsvFileFormat.h                           //
// ************************************************************************* //

#ifndef AVT_Vlsv_FILE_FORMAT_H
#define AVT_Vlsv_FILE_FORMAT_H

#include <avtSTMDFileFormat.h>


// ****************************************************************************
//  Class: avtVlsvFileFormat
//
//  Purpose:
//      Reads in Vlsv files as a plugin to VisIt.
//
//  Programmer: sandroos -- generated by xml2avt
//  Creation:   Fri Jan 25 14:19:12 PST 2013
//
// ****************************************************************************

#include <map>
#include <mesh_metadata_visit.h>
#include <mesh_reader.h>
#include <vlsv_reader.h>

class avtVlsvFileFormat: public avtSTMDFileFormat {
 public:
                       avtVlsvFileFormat(const char *filename);
    virtual           ~avtVlsvFileFormat();

    //
    // This is used to return unconvention data -- ranging from material
    // information to information about block connectivity.
    //
    // virtual void      *GetAuxiliaryData(const char *var, const char *type,
    //                                  void *args, DestructorFunction &);
    //

    //
    // These are used to declare what the current time and cycle are for the
    // file.  These should only be defined if the file format knows what the
    // time and/or cycle is.
    //
    virtual bool      ReturnsValidCycle() const {return true;}
    virtual int       GetCycle(void);
    virtual bool      ReturnsValidTime() const {return true;}
    virtual double    GetTime(void);
    //

   void ActivateTimestep(void);
   
    virtual const char* GetType(void);
    virtual void FreeUpResources(void); 

    virtual vtkDataSet    *GetMesh(int,const char *);
    virtual vtkDataArray  *GetVar(int,const char *);
    virtual vtkDataArray  *GetVectorVar(int,const char *);

 protected:
   // DATA MEMBERS
   vlsv::Reader* vlsvReader;
   std::string inputFile;

   bool dataTimestepFound;
   int dataTimestep;
   bool dataTimeFound;
   double dataTime;

   // Parallel plugin variables:
   #ifdef PARALLEL
      int mpiRank;         /**< MPI rank of process owning this instance of VLSV plugin.*/
      int mpiProcessCount; /**< Number of MPI processes in VisIt parallel engine.*/
   #endif
   
   bool metadataRead;
   static int objectCounter;
   int objectNumber;
   std::string previousMesh;  /**< Name of mesh VisIt accessed last.*/

   std::map<std::string,vlsvplugin::VisitMeshMetadata*> meshMetadata;
   std::map<std::string,vlsvplugin::MeshReader*> meshReaders;
   
   void addMesh(avtDatabaseMetaData* md,const vlsvplugin::VisitMeshMetadata* const mesh);
   bool readMetadata();

   std::string printProcessInfo() const;

   bool PrepareVariable(int domain,const char* varName,
			std::map<std::string,vlsvplugin::VisitMeshMetadata*>::const_iterator& metadata,
			std::map<std::string,vlsvplugin::MeshReader*>::const_iterator& meshReader,
			std::vector<vlsvplugin::VariableMetadata>::const_iterator& variableMetadata);
   vtkDataArray* ReadVariable(int domain,const char* varName);
   virtual void PopulateDatabaseMetaData(avtDatabaseMetaData* md);
};


#endif
